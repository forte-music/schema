# An integer number of seconds since the UTC epoch.
scalar Time

# An album is a collection of songs which belong to an artist and has a name.
type Album {
  # A globally unique id referring to this album.
  id: ID!

  # The http/https url at which a square PNG of the album artwork can be found.
  # Clients should request artwork with the same authentication as used with the
  # API server.
  artworkUrl: String

  # The human readable name of the album.
  name: String!

  # The artist who released the album. If the album is a compilation and there
  # are multiple artists on album this is usually various artists (a designated
  # id). This is usually album artists tag of crawled files.
  artist: Artist!

  # Songs in this album sorted by song index.
  songs: [Song!]!

  # The sum of the durations of every song in this album album in seconds.
  duration: Int!

  # The year the album was released.
  releaseYear: Int

  # The time at which this item was last played. If the item has never been
  # played, this is null.
  lastPlayed: Time

  # Time this was added.
  timeAdded: Time!
}

type Artist {
  # A globally unique id referring to this artist.
  id: ID!

  # The human readable name of this artist.
  name: String!

  # Albums this artist has authored. These are the albums that this artist is
  # the album artist of. The albums are sorted by release date.
  albums: [Album!]!

  # The time at which this item was last played. If the item has never been
  # played, this is null.
  lastPlayed: Time

  # Time this was added.
  timeAdded: Time!
}

# A song is a piece of music written by artists. It is always part of an album.
# It represents a singe audio file.
type Song {
  # A globally unique id referring to this song.
  id: ID!

  # The track number of this song. This may be one or zero indexed and is
  # provided by the file's metadata.
  trackNumber: Int!

  # The disk this track is on. The disk number is assumed to be 1 if not
  # provided.
  diskNumber: Int!

  # The human readable name of this song.
  name: String!

  # The album this song is a part of. A song can only belong to one album.
  album: Album!

  # The artists which composed this song. This could include the album artist.
  # The order of the artists is determined by the sync engine. It usually has
  # the album artist first with featuring artists following.
  artists: [Artist!]!

  # The time at which this item was last played. If the item has never been
  # played, this is null.
  lastPlayed: Time

  # The number of times this item has been played.
  playCount: Int!

  # Whether or not this song is liked. Liked songs go into their own
  # auto-playlist. By default this value is false. Updated by toggleLike
  # mutation.
  liked: Boolean!

  # The duration of the file in seconds.
  duration: Int!

  # Time this was added.
  timeAdded: Time!
}

type AlbumSongStats {
  song: Song!
  album: Album!
}

type ArtistSongStats {
  song: Song!
  artist: Artist!
}

# The connection and edge types below are used to implement pagination. The
# pattern is described here http://graphql.org/learn/pagination/ and defined
# here https://facebook.github.io/relay/graphql/connections.htm
#
# The `first` parameter of queries which return a connection is used to specify
# the amount of items to get.
#
# The `after` parameter of queries which return a connection is used to specify
# the cursor after which to get items from.
#
# Cursors are opaque tokens which are bound to a query and can be used to
# request more items for a query (arguments and field combination). Cursors
# are tied to a view of the data. If new data is added continuted pagination
# returns the old data.
type PageInfo {
  hasNextPage: Boolean!
}

type AlbumEdge {
  cursor: String!
  node: Album!
}

type AlbumConnection {
  edges: [AlbumEdge!]!
  pageInfo: PageInfo!
  count: Int!
}

type ArtistEdge {
  cursor: String!
  node: Artist!
}

type ArtistConnection {
  edges: [ArtistEdge!]!
  pageInfo: PageInfo!
  count: Int!
}

type SongEdge {
  cursor: String!
  node: Song!
}

type SongConnection {
  edges: [SongEdge!]!
  pageInfo: PageInfo!
  count: Int!
}

enum SortBy {
  # Sort from most recently added to least recently added.
  RECENTLY_ADDED

  # Sort by title in case-insensitive alphabetic order.
  LEXICOGRAPHICALLY

  # Sort from most recently played to least recently played.
  RECENTLY_PLAYED
}

input SortParams {
  # The order in which the results are sorted.
  sortBy: SortBy!

  # Returns the results sorted in reverse order.
  reverse: Boolean = false

  # Only results with titles matching this string are returned.
  filter: String = ""
}

union RecentItem = Album | Artist

type Query {
  # Get an album by its globally unique id.
  album(id: ID!): Album!

  # Get paginated, filtered, sorted albums.
  albums(first: Int = 25, after: String, sort: SortParams): AlbumConnection!

  # Get an artist by its globally unique id.
  artist(id: ID!): Artist!

  # Get paginated, filtered, sorted artists.
  artists(first: Int = 25, after: String, sort: SortParams): ArtistConnection!

  # Get a song by its globally unique id.
  song(id: ID!): Song!

  # Get paginated, filtered, sorted songs.
  songs(first: Int = 25, after: String, sort: SortParams): SongConnection!

  # Gets the most recently added albums and artists.
  recentlyAdded(first: Int = 25): [RecentItem!]!

  # Gets the most recently played albums and artists.
  recentlyPlayed(first: Int = 25): [RecentItem!]!
}

type Mutation {
  trackPlaySong(songId: ID!): Song!

  trackPlaySongFromAlbum(songId: ID!, albumId: ID!): AlbumSongStats!

  trackPlaySongFromArtist(songId: ID!, artistId: ID!): ArtistSongStats!

  # Toggles the like state of the specified song.
  toggleLike(songId: ID!): Song!
}

schema {
  query: Query
  mutation: Mutation
}
